{"dependencies":[],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar default_1 = /** @class */ (function () {\n    function default_1(config) {\n        this.route = config.route;\n        this.fn = config.fn;\n        this.scope = config.scope ? config.scope : null;\n        this.rules = config.rules ? config.rules : {};\n        this.routeArguments = Array();\n        this.optionalRouteArguments = Array();\n        //Create the route arguments if they exist\n        this.routeParts = this.route.split(\"/\");\n        for (var i = 0, j = this.routeParts.length; i < j; i++) {\n            var rPart = this.routeParts[i];\n            //See if there are pseudo macro's in the route\n            //will fetch all {id} parts of the route. So the manditory parts\n            if (rPart.substr(0, 1) == \"{\" && rPart.substr(rPart.length - 1, 1) == \"}\") {\n                var rKey = rPart.substr(1, rPart.length - 2);\n                this.optionalRouteArguments.push(rKey);\n            }\n            //will fetch all :id: parts of the route. So the optional parts\n            if (rPart.substr(0, 1) == \":\") {\n                var rKey = rPart.substr(1, rPart.length - 2);\n                this.routeArguments.push(rKey);\n            }\n        }\n    }\n    default_1.prototype.matches = function (route) {\n        //We'd like to examen every individual part of the incoming route\n        var incomingRouteParts = route.split(\"/\");\n        //This might seem strange, but assuming the route is correct\n        //makes the logic easier, than assuming it is wrong.    \n        var routeMatches = true;\n        //if the route is shorter than the route we want to check it against we can immidiatly stop.\n        if (this.routeParts.slice(0, 2).indexOf('*') !== -1)\n            routeMatches = true;\n        else if (incomingRouteParts.length < this.routeParts.length - this.optionalRouteArguments.length) {\n            routeMatches = false;\n            // console.log(1)\n        }\n        else {\n            // console.log(2)\n            var a = incomingRouteParts;\n            for (var i = 0, j = a.length; i < j && routeMatches; i++) {\n                //Lets cache the variables, to prevent variable lookups by the javascript engine\n                var iRp = a[i]; //current incoming Route Part\n                var rP = this.routeParts[i]; //current routePart                     \n                if (typeof rP == 'undefined') {\n                    // console.log(20)\n                    //The route almost certainly doesn't match it's longer than the route to check against\n                    routeMatches = false;\n                }\n                else {\n                    // console.log(21)\n                    var cP0 = rP.substr(0, 1); //char at postion 0\n                    var cPe = rP.substr(rP.length - 1, 1); //char at last postion                   \n                    if ((cP0 != \"{\" && cP0 != \":\") && (cPe != \"}\")) {\n                        // console.log(210, cP0, cPe, rP, iRp, incomingRouteParts)\n                        //This part of the route to check against is not  a pseudo macro, so it has to match exactly\n                        if (iRp != rP) {\n                            routeMatches = false;\n                        }\n                    }\n                    else {\n                        // console.log(211)\n                        //Since this is a pseudo macro and there was a value at this place. The route is correct.\n                        routeMatches = true;\n                    }\n                }\n            }\n        }\n        // console.log(routeMatches, route, this)\n        return routeMatches;\n    };\n    default_1.prototype.getArgumentsValues = function (route) {\n        //Split the incoming route\n        var rRouteParts = route.split(\"/\");\n        //Create an array for the values\n        var rObject = new Object();\n        for (var i = 0, j = this.routeParts.length; i < j; i++) {\n            var rP = this.routeParts[i]; //current routePart\n            var cP0 = rP.substr(0, 1); //char at postion 0\n            var cPe = rP.substr(rP.length - 1, 1); //char at last postion\n            if ((cP0 == \"{\" && cPe == \"}\") || cP0 == \":\") {\n                var key = cP0 == \":\" ? rP.substr(1) : rP.substr(1, rP.length - 2);\n                // console.log(key, cP0 == \":\", rP.substr(1), rP.substr(1, rP.length - 2))\n                //if this part of the route was a pseudo macro,\n                //either manditory or optional add this to the array\n                rObject[key] = rRouteParts[i];\n            }\n        }\n        return rObject;\n    };\n    return default_1;\n}());\nexports[\"default\"] = default_1;\n"},"hash":"fd7624ec9094abfaa3b3b5b7ae0132f0"}